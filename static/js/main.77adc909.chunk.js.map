{"version":3,"sources":["components/Jumbotron.js","components/Card.js","components/Sidepane.js","db.js","App.js","reportWebVitals.js","index.js"],"names":["Jumbotron","props","id","className","Card","firstName","lastName","title","department","managerFirstName","managerLastName","Sidepane","useState","name","setName","type","placeholder","aria-label","aria-describedby","onChange","e","value","target","onClick","filterByName","removeFilterByName","sortByName","sortByNameDescending","Employee","this","employees","push","db","App","setEmployees","useEffect","filteredEmployees","filter","employee","nameCaps","toUpperCase","firstNameCaps","lastNameCaps","includes","sortedEmployees","sort","employeeA","employeeB","firstNameA","firstNameB","lastNameA","lastNameB","map","index","populateEmployees","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77adc909.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n    return (\n        <div id=\"header\" className=\"jumbotron\">\n            <h1>Employee Directory</h1>\n        </div>   \n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n    return (\n        <div id=\"employee-card\" className=\"card\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title\"><strong>{props.firstName} {props.lastName}</strong></h5>\n                <h6 className=\"card-subtitle mb-2\"><strong>Title: </strong>{props.title}</h6>\n                <h6 className=\"card-subtitle mb-2\"><strong>Department: </strong>{props.department}</h6>\n                <h6 className=\"card-subtitle mb-2\"><strong>Manager: </strong>{props.managerFirstName} {props.managerLastName}</h6>\n            </div>\n        </div>   \n    );\n}\n\n\nexport default Card;","import React, { useState } from \"react\";\nimport \"./style.css\";\n\nfunction Sidepane(props) {\n    const [name, setName] = useState();\n\n    const setNameFilter = (value) => {\n        setName(value);\n    }\n\n    return (\n        <div>\n            <nav className=\"d-md-block bg-light sidebar\">\n                <div className=\"input-group\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"name\"\n                        aria-label=\"name\"\n                        aria-describedby=\"basic-addon2\"\n                        onChange = {e => setNameFilter(e.target.value)}/>\n                    <div className=\"input-group-append\">\n                        <button id=\"filter-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => {props.filterByName(name)}}>Filter</button>\n                        <button id=\"sort-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={props.removeFilterByName}>Undo Filter</button>\n                        <button id=\"sort-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={props.sortByName}>Sort</button>\n                        <button id=\"sort-btn\" className=\"btn btn-outline-secondary\" type=\"button\" onClick={props.sortByNameDescending}>Sort Descending</button>\n\n                    </div>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\n\nexport default Sidepane;","class Employee {\n    constructor (firstName, lastName, title, managerFirstName, managerLastName, department) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.title = title;\n        this.managerFirstName = managerFirstName;\n        this.managerLastName = managerLastName;\n        this.department = department;\n    }\n}\n\nconst employees = [];\n\nemployees.push(new Employee (\"Adam\", \"Tatar\", \"Software Engineer\", \"Mo\", \"Tatar\", \"Development\"));\nemployees.push(new Employee (\"Jess\", \"Grand\", \"Junior Software Engineer\", \"Mo\", \"Tatar\", \"Development\"));\nemployees.push(new Employee (\"Corbin\", \"Max\", \" Test Engineer\", \"Angie\", \"Alt\", \"Development\"));\nemployees.push(new Employee (\"JJ\", \"Jayjay\", \"Senior Accountant\", \"Angie\", \"Alt\", \"Finance\"));\nemployees.push(new Employee (\"Ryan\", \"Doobs\", \"Junior Accountant\", \"Angie\", \"Alt\", \"Finance\"));\n\nconst db = {employees: employees};\n\nexport default db;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\";\nimport Sidepane from \"./components/Sidepane\";\n// import './bootstrap/dist/css/bootstrap.min.css';\nimport db from \"./db\";\n\n\nfunction App() {\n  \n  const [employees, setEmployees] = useState();\n\n  const populateEmployees = (employees) => {\n    if (employees) {\n      return employees.map((employee, index) => {\n        return <Card key={index} {...employee}/>;\n      });\n    }\n  }\n\n  useEffect(() => {\n    setEmployees(db.employees);\n  }, []);\n\n  //find any employees that include the input name in their first or last name\n  const filterByName = (name) => {\n    const filteredEmployees = db.employees.filter((employee) => {\n      const nameCaps = name.toUpperCase();\n      const firstNameCaps = employee.firstName.toUpperCase();\n      const lastNameCaps = employee.lastName.toUpperCase();\n      return (firstNameCaps.includes(nameCaps) || lastNameCaps.includes(nameCaps));\n    });\n\n    setEmployees(filteredEmployees);\n  }\n\n  //undo name filter\n  const removeFilterByName = () => {\n    setEmployees(db.employees);\n  }\n  \n  //sort in ascending order using firstName and then last name\n  const sortByName = () => {\n    const sortedEmployees = [...employees];\n    sortedEmployees.sort((employeeA, employeeB) => {\n      const firstNameA = employeeA.firstName.toUpperCase();\n      const firstNameB = employeeB.firstName.toUpperCase();\n\n      if (firstNameA < firstNameB) return -1;\n      if (firstNameA > firstNameB) return 1;\n      if (firstNameA === firstNameB) {\n        const lastNameA = employeeA.lastName.toUpperCase();\n        const lastNameB = employeeB.lastName.toUpperCase();\n        if (lastNameA < lastNameB) return -1;\n        if (lastNameA > lastNameB) return 1;\n      }\n\n      return 0;\n    });\n\n    setEmployees(sortedEmployees);\n  }\n\n  //sort in descending order using first name and then last name\n  const sortByNameDescending = () => {\n    const sortedEmployees = [...employees];\n    sortedEmployees.sort((employeeA, employeeB) => {\n      const firstNameA = employeeA.firstName.toUpperCase();\n      const firstNameB = employeeB.firstName.toUpperCase();\n\n      if (firstNameA < firstNameB) return 1;\n      if (firstNameA > firstNameB) return -1;\n      if (firstNameA === firstNameB) {\n        const lastNameA = employeeA.lastName.toUpperCase();\n        const lastNameB = employeeB.lastName.toUpperCase();\n        if (lastNameA < lastNameB) return 1;\n        if (lastNameA > lastNameB) return -1;\n      }\n\n      return 0;\n    });\n\n    setEmployees(sortedEmployees);\n  };\n\n  return (\n    <div className=\"App\">\n      <Jumbotron/>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <Sidepane \n              filterByName={(name) => filterByName(name)} \n              sortByName={sortByName}\n              removeFilterByName={removeFilterByName}\n              sortByNameDescending ={sortByNameDescending}\n            />  \n          </div>\n          <div id=\"employees-div\" className=\"col-md-8\">\n            {populateEmployees(employees)}  \n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}